/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './route/__root'
import { Route as SignUpImport } from './route/sign-up'
import { Route as SignInImport } from './route/sign-in'
import { Route as AdminImport } from './route/admin'
import { Route as IndexImport } from './route/index'

// Create Virtual Routes

const AdminIndexLazyImport = createFileRoute('/admin/')()
const BusinessNewLazyImport = createFileRoute('/business/new')()
const BusinessBusinessKeyLazyImport = createFileRoute(
  '/business/$businessKey',
)()
const AdminLibraryLazyImport = createFileRoute('/admin/library')()
const AdminDeveloperLazyImport = createFileRoute('/admin/developer')()
const BusinessBusinessKeyIndexLazyImport = createFileRoute(
  '/business/$businessKey/',
)()
const BusinessBusinessKeyServiceLazyImport = createFileRoute(
  '/business/$businessKey/service',
)()
const BusinessBusinessKeyProductLazyImport = createFileRoute(
  '/business/$businessKey/product',
)()
const BusinessBusinessKeyClientLazyImport = createFileRoute(
  '/business/$businessKey/client',
)()
const BusinessBusinessKeyInvoiceIndexLazyImport = createFileRoute(
  '/business/$businessKey/invoice/',
)()
const BusinessBusinessKeyInvoiceInvoiceKeyLazyImport = createFileRoute(
  '/business/$businessKey/invoice/$invoiceKey',
)()

// Create/Update Routes

const SignUpRoute = SignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexLazyRoute = AdminIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any).lazy(() => import('./route/admin/index.lazy').then((d) => d.Route))

const BusinessNewLazyRoute = BusinessNewLazyImport.update({
  id: '/business/new',
  path: '/business/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./route/business/new.lazy').then((d) => d.Route))

const BusinessBusinessKeyLazyRoute = BusinessBusinessKeyLazyImport.update({
  id: '/business/$businessKey',
  path: '/business/$businessKey',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./route/business/$businessKey.lazy').then((d) => d.Route),
)

const AdminLibraryLazyRoute = AdminLibraryLazyImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => AdminRoute,
} as any).lazy(() => import('./route/admin/library.lazy').then((d) => d.Route))

const AdminDeveloperLazyRoute = AdminDeveloperLazyImport.update({
  id: '/developer',
  path: '/developer',
  getParentRoute: () => AdminRoute,
} as any).lazy(() =>
  import('./route/admin/developer.lazy').then((d) => d.Route),
)

const BusinessBusinessKeyIndexLazyRoute =
  BusinessBusinessKeyIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => BusinessBusinessKeyLazyRoute,
  } as any).lazy(() =>
    import('./route/business/$businessKey/index.lazy').then((d) => d.Route),
  )

const BusinessBusinessKeyServiceLazyRoute =
  BusinessBusinessKeyServiceLazyImport.update({
    id: '/service',
    path: '/service',
    getParentRoute: () => BusinessBusinessKeyLazyRoute,
  } as any).lazy(() =>
    import('./route/business/$businessKey/service.lazy').then((d) => d.Route),
  )

const BusinessBusinessKeyProductLazyRoute =
  BusinessBusinessKeyProductLazyImport.update({
    id: '/product',
    path: '/product',
    getParentRoute: () => BusinessBusinessKeyLazyRoute,
  } as any).lazy(() =>
    import('./route/business/$businessKey/product.lazy').then((d) => d.Route),
  )

const BusinessBusinessKeyClientLazyRoute =
  BusinessBusinessKeyClientLazyImport.update({
    id: '/client',
    path: '/client',
    getParentRoute: () => BusinessBusinessKeyLazyRoute,
  } as any).lazy(() =>
    import('./route/business/$businessKey/client.lazy').then((d) => d.Route),
  )

const BusinessBusinessKeyInvoiceIndexLazyRoute =
  BusinessBusinessKeyInvoiceIndexLazyImport.update({
    id: '/invoice/',
    path: '/invoice/',
    getParentRoute: () => BusinessBusinessKeyLazyRoute,
  } as any).lazy(() =>
    import('./route/business/$businessKey/invoice/index.lazy').then(
      (d) => d.Route,
    ),
  )

const BusinessBusinessKeyInvoiceInvoiceKeyLazyRoute =
  BusinessBusinessKeyInvoiceInvoiceKeyLazyImport.update({
    id: '/invoice/$invoiceKey',
    path: '/invoice/$invoiceKey',
    getParentRoute: () => BusinessBusinessKeyLazyRoute,
  } as any).lazy(() =>
    import('./route/business/$businessKey/invoice/$invoiceKey.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
    '/admin/developer': {
      id: '/admin/developer'
      path: '/developer'
      fullPath: '/admin/developer'
      preLoaderRoute: typeof AdminDeveloperLazyImport
      parentRoute: typeof AdminImport
    }
    '/admin/library': {
      id: '/admin/library'
      path: '/library'
      fullPath: '/admin/library'
      preLoaderRoute: typeof AdminLibraryLazyImport
      parentRoute: typeof AdminImport
    }
    '/business/$businessKey': {
      id: '/business/$businessKey'
      path: '/business/$businessKey'
      fullPath: '/business/$businessKey'
      preLoaderRoute: typeof BusinessBusinessKeyLazyImport
      parentRoute: typeof rootRoute
    }
    '/business/new': {
      id: '/business/new'
      path: '/business/new'
      fullPath: '/business/new'
      preLoaderRoute: typeof BusinessNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexLazyImport
      parentRoute: typeof AdminImport
    }
    '/business/$businessKey/client': {
      id: '/business/$businessKey/client'
      path: '/client'
      fullPath: '/business/$businessKey/client'
      preLoaderRoute: typeof BusinessBusinessKeyClientLazyImport
      parentRoute: typeof BusinessBusinessKeyLazyImport
    }
    '/business/$businessKey/product': {
      id: '/business/$businessKey/product'
      path: '/product'
      fullPath: '/business/$businessKey/product'
      preLoaderRoute: typeof BusinessBusinessKeyProductLazyImport
      parentRoute: typeof BusinessBusinessKeyLazyImport
    }
    '/business/$businessKey/service': {
      id: '/business/$businessKey/service'
      path: '/service'
      fullPath: '/business/$businessKey/service'
      preLoaderRoute: typeof BusinessBusinessKeyServiceLazyImport
      parentRoute: typeof BusinessBusinessKeyLazyImport
    }
    '/business/$businessKey/': {
      id: '/business/$businessKey/'
      path: '/'
      fullPath: '/business/$businessKey/'
      preLoaderRoute: typeof BusinessBusinessKeyIndexLazyImport
      parentRoute: typeof BusinessBusinessKeyLazyImport
    }
    '/business/$businessKey/invoice/$invoiceKey': {
      id: '/business/$businessKey/invoice/$invoiceKey'
      path: '/invoice/$invoiceKey'
      fullPath: '/business/$businessKey/invoice/$invoiceKey'
      preLoaderRoute: typeof BusinessBusinessKeyInvoiceInvoiceKeyLazyImport
      parentRoute: typeof BusinessBusinessKeyLazyImport
    }
    '/business/$businessKey/invoice/': {
      id: '/business/$businessKey/invoice/'
      path: '/invoice'
      fullPath: '/business/$businessKey/invoice'
      preLoaderRoute: typeof BusinessBusinessKeyInvoiceIndexLazyImport
      parentRoute: typeof BusinessBusinessKeyLazyImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminDeveloperLazyRoute: typeof AdminDeveloperLazyRoute
  AdminLibraryLazyRoute: typeof AdminLibraryLazyRoute
  AdminIndexLazyRoute: typeof AdminIndexLazyRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDeveloperLazyRoute: AdminDeveloperLazyRoute,
  AdminLibraryLazyRoute: AdminLibraryLazyRoute,
  AdminIndexLazyRoute: AdminIndexLazyRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface BusinessBusinessKeyLazyRouteChildren {
  BusinessBusinessKeyClientLazyRoute: typeof BusinessBusinessKeyClientLazyRoute
  BusinessBusinessKeyProductLazyRoute: typeof BusinessBusinessKeyProductLazyRoute
  BusinessBusinessKeyServiceLazyRoute: typeof BusinessBusinessKeyServiceLazyRoute
  BusinessBusinessKeyIndexLazyRoute: typeof BusinessBusinessKeyIndexLazyRoute
  BusinessBusinessKeyInvoiceInvoiceKeyLazyRoute: typeof BusinessBusinessKeyInvoiceInvoiceKeyLazyRoute
  BusinessBusinessKeyInvoiceIndexLazyRoute: typeof BusinessBusinessKeyInvoiceIndexLazyRoute
}

const BusinessBusinessKeyLazyRouteChildren: BusinessBusinessKeyLazyRouteChildren =
  {
    BusinessBusinessKeyClientLazyRoute: BusinessBusinessKeyClientLazyRoute,
    BusinessBusinessKeyProductLazyRoute: BusinessBusinessKeyProductLazyRoute,
    BusinessBusinessKeyServiceLazyRoute: BusinessBusinessKeyServiceLazyRoute,
    BusinessBusinessKeyIndexLazyRoute: BusinessBusinessKeyIndexLazyRoute,
    BusinessBusinessKeyInvoiceInvoiceKeyLazyRoute:
      BusinessBusinessKeyInvoiceInvoiceKeyLazyRoute,
    BusinessBusinessKeyInvoiceIndexLazyRoute:
      BusinessBusinessKeyInvoiceIndexLazyRoute,
  }

const BusinessBusinessKeyLazyRouteWithChildren =
  BusinessBusinessKeyLazyRoute._addFileChildren(
    BusinessBusinessKeyLazyRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/admin/developer': typeof AdminDeveloperLazyRoute
  '/admin/library': typeof AdminLibraryLazyRoute
  '/business/$businessKey': typeof BusinessBusinessKeyLazyRouteWithChildren
  '/business/new': typeof BusinessNewLazyRoute
  '/admin/': typeof AdminIndexLazyRoute
  '/business/$businessKey/client': typeof BusinessBusinessKeyClientLazyRoute
  '/business/$businessKey/product': typeof BusinessBusinessKeyProductLazyRoute
  '/business/$businessKey/service': typeof BusinessBusinessKeyServiceLazyRoute
  '/business/$businessKey/': typeof BusinessBusinessKeyIndexLazyRoute
  '/business/$businessKey/invoice/$invoiceKey': typeof BusinessBusinessKeyInvoiceInvoiceKeyLazyRoute
  '/business/$businessKey/invoice': typeof BusinessBusinessKeyInvoiceIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/admin/developer': typeof AdminDeveloperLazyRoute
  '/admin/library': typeof AdminLibraryLazyRoute
  '/business/new': typeof BusinessNewLazyRoute
  '/admin': typeof AdminIndexLazyRoute
  '/business/$businessKey/client': typeof BusinessBusinessKeyClientLazyRoute
  '/business/$businessKey/product': typeof BusinessBusinessKeyProductLazyRoute
  '/business/$businessKey/service': typeof BusinessBusinessKeyServiceLazyRoute
  '/business/$businessKey': typeof BusinessBusinessKeyIndexLazyRoute
  '/business/$businessKey/invoice/$invoiceKey': typeof BusinessBusinessKeyInvoiceInvoiceKeyLazyRoute
  '/business/$businessKey/invoice': typeof BusinessBusinessKeyInvoiceIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/admin/developer': typeof AdminDeveloperLazyRoute
  '/admin/library': typeof AdminLibraryLazyRoute
  '/business/$businessKey': typeof BusinessBusinessKeyLazyRouteWithChildren
  '/business/new': typeof BusinessNewLazyRoute
  '/admin/': typeof AdminIndexLazyRoute
  '/business/$businessKey/client': typeof BusinessBusinessKeyClientLazyRoute
  '/business/$businessKey/product': typeof BusinessBusinessKeyProductLazyRoute
  '/business/$businessKey/service': typeof BusinessBusinessKeyServiceLazyRoute
  '/business/$businessKey/': typeof BusinessBusinessKeyIndexLazyRoute
  '/business/$businessKey/invoice/$invoiceKey': typeof BusinessBusinessKeyInvoiceInvoiceKeyLazyRoute
  '/business/$businessKey/invoice/': typeof BusinessBusinessKeyInvoiceIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/sign-in'
    | '/sign-up'
    | '/admin/developer'
    | '/admin/library'
    | '/business/$businessKey'
    | '/business/new'
    | '/admin/'
    | '/business/$businessKey/client'
    | '/business/$businessKey/product'
    | '/business/$businessKey/service'
    | '/business/$businessKey/'
    | '/business/$businessKey/invoice/$invoiceKey'
    | '/business/$businessKey/invoice'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/sign-up'
    | '/admin/developer'
    | '/admin/library'
    | '/business/new'
    | '/admin'
    | '/business/$businessKey/client'
    | '/business/$businessKey/product'
    | '/business/$businessKey/service'
    | '/business/$businessKey'
    | '/business/$businessKey/invoice/$invoiceKey'
    | '/business/$businessKey/invoice'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/sign-in'
    | '/sign-up'
    | '/admin/developer'
    | '/admin/library'
    | '/business/$businessKey'
    | '/business/new'
    | '/admin/'
    | '/business/$businessKey/client'
    | '/business/$businessKey/product'
    | '/business/$businessKey/service'
    | '/business/$businessKey/'
    | '/business/$businessKey/invoice/$invoiceKey'
    | '/business/$businessKey/invoice/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  BusinessBusinessKeyLazyRoute: typeof BusinessBusinessKeyLazyRouteWithChildren
  BusinessNewLazyRoute: typeof BusinessNewLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  BusinessBusinessKeyLazyRoute: BusinessBusinessKeyLazyRouteWithChildren,
  BusinessNewLazyRoute: BusinessNewLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/sign-in",
        "/sign-up",
        "/business/$businessKey",
        "/business/new"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/developer",
        "/admin/library",
        "/admin/"
      ]
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    },
    "/admin/developer": {
      "filePath": "admin/developer.lazy.tsx",
      "parent": "/admin"
    },
    "/admin/library": {
      "filePath": "admin/library.lazy.tsx",
      "parent": "/admin"
    },
    "/business/$businessKey": {
      "filePath": "business/$businessKey.lazy.tsx",
      "children": [
        "/business/$businessKey/client",
        "/business/$businessKey/product",
        "/business/$businessKey/service",
        "/business/$businessKey/",
        "/business/$businessKey/invoice/$invoiceKey",
        "/business/$businessKey/invoice/"
      ]
    },
    "/business/new": {
      "filePath": "business/new.lazy.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.lazy.tsx",
      "parent": "/admin"
    },
    "/business/$businessKey/client": {
      "filePath": "business/$businessKey/client.lazy.tsx",
      "parent": "/business/$businessKey"
    },
    "/business/$businessKey/product": {
      "filePath": "business/$businessKey/product.lazy.tsx",
      "parent": "/business/$businessKey"
    },
    "/business/$businessKey/service": {
      "filePath": "business/$businessKey/service.lazy.tsx",
      "parent": "/business/$businessKey"
    },
    "/business/$businessKey/": {
      "filePath": "business/$businessKey/index.lazy.tsx",
      "parent": "/business/$businessKey"
    },
    "/business/$businessKey/invoice/$invoiceKey": {
      "filePath": "business/$businessKey/invoice/$invoiceKey.lazy.tsx",
      "parent": "/business/$businessKey"
    },
    "/business/$businessKey/invoice/": {
      "filePath": "business/$businessKey/invoice/index.lazy.tsx",
      "parent": "/business/$businessKey"
    }
  }
}
ROUTE_MANIFEST_END */
